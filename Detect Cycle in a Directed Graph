#include <bits/stdc++.h> 
bool dfs(int node, unordered_map<int,bool> &visited, unordered_map<int,bool> &dfsvisited, unordered_map<int,list<int>> &adj){
	visited[node]=true;
	dfsvisited[node]=true;

	for(auto neighbour: adj[node]){
		if(!visited[neighbour]){
			bool ans=dfs(neighbour, visited, dfsvisited, adj);
			if(ans)
			return true;
		}

		else if(visited[neighbour]==true && dfsvisited[neighbour]==true){
			return true;
		}
	}
	dfsvisited[node]=false;
	return false;
}
bool isCyclic(vector<vector<int>>& edges, int v, int e)
{
	// Write your code here
	unordered_map<int,list<int>> adj;
	for(int i=0; i<e; i++){
		int u=edges[i][0];
		int v=edges[i][1];

		adj[u].push_back(v);
	}
	
	unordered_map<int,bool> dfsvisited;
	unordered_map<int,bool> visited;

	for(int i=0; i<v; i++){
		if(!visited[i]){
			bool ans=dfs(i,visited,dfsvisited,adj);
			if(ans)
			return true;
		}
	}
	return false;
}
